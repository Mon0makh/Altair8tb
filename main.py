""" Altair8 HUB Interface Telegram bot ver 0.3
    Vladimir Monomakh
"""

# Import
from pymongo import MongoClient

import logging

import telebot

from telegram import Bot
from telegram import Update
from telegram import ReplyKeyboardMarkup
from telegram import KeyboardButton
from telegram import ReplyKeyboardRemove
from telegram import InlineKeyboardButton
from telegram import InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler
from telegram.ext import Filters
from telegram.ext import CallbackContext

from config import TG_TOKEN
from config import MONGODB_LINK
from config import MONGO_DB

import certifi
ca = certifi.where()
tele_Bot = telebot.TeleBot(TG_TOKEN, parse_mode=None)

# -------------------------------
# Bot Logic
# -------------------------------


# bot = Bot(TG_TOKEN)

# Connect to DataBase
mondb = MongoClient(MONGODB_LINK, tlsCAFile=ca)[MONGO_DB]

# Login Keyboard
contact_keyboard = KeyboardButton('–í–æ–π—Ç–∏', request_contact=True)
custom_keyboard_login = [[contact_keyboard]]
REPLY_KEYBOARD_MARKUP = ReplyKeyboardMarkup(custom_keyboard_login, resize_keyboard=True)

CALLBACK_MM = "cb_mm"
CALLBACK_MM_HUB = "cb_mm_hs"
CALLBACK_MM_CHATS = "cb_mm_ch"
CALLBACK_MM_SCHEDULE = "cb_mm_sch"
CALLBACK_MM_TASKS = "cb_mm_ts"
CALLBACK_MM_TODO = "cb_mm_todo"
CALLBACK_MM_MUSIC = "cb_mm_mus"
CALLBACK_MM_SETTING = "cb_mm_setting"
CALLBACK_MM_ARRadio = "cb_mm_arr"
CALLBACK_MM_SHOP = "cb_mm_shop"
CALLBACK_MM_CORNER = "cb_mm_corner"
CALLBACK_CORNER_LEFT = "cb_cr_lf"
CALLBACK_CORNER_RIGHT = "cb_cr_rhg"
CALLBACK_RR = "cb_rr"


def get_hubs(bool_list):
    keyboard = []
    if int(bool_list[1]):
        keyboard.append([InlineKeyboardButton("üñ•    DEV.HUB", url="https://t.me/joinchat/OPPf1lTKYcszVxfih0m2jw")])
    if int(bool_list[2]):
        keyboard.append([InlineKeyboardButton("üîå   HARD.HUB", url="https://t.me/joinchat/OPPf1lh2GTulebNiu34jEw")])
    if int(bool_list[3]):
        keyboard.append([InlineKeyboardButton("üó£    SOC.HUB", url="https://t.me/joinchat/OPPf1laFJhzZ6Sx88P0YOQ")])
    if int(bool_list[4]):
        keyboard.append([InlineKeyboardButton("üî≥    ART.HUB", url="https://t.me/joinchat/OPPf1leFxg4vdBbkler_Xg")])
    if int(bool_list[5]):
        keyboard.append([InlineKeyboardButton("üéÆ   GEEK.HUB", url="https://t.me/HramBoginiBABISA")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM)])

    return InlineKeyboardMarkup(keyboard)

def get_social_networks():
    keyboard = [
        [
            InlineKeyboardButton("üåê  Web Site", url='https://www.thehub.su/'),
        ],
        [
            InlineKeyboardButton("üì∏ Instagram", url='https://instagram.com/thehub.su'),
        ],
        [
            InlineKeyboardButton("‚úà  Telegram Chanel", url='https://t.me/thehub_su'),
        ],
        [
            InlineKeyboardButton("Ô∏èüé•  YouTube", url='https://www.youtube.com/channel/UC8luLtn3EhGh0wWqE92sUZA'),
        ],
        [
            InlineKeyboardButton("üéô  Discord", url='https://discord.gg/y6CsTWxtwA'),
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_corner_nav(full_name, username):
    keyboard = [
        [
            InlineKeyboardButton(full_name, url='https://t.me/'+username),
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=CALLBACK_CORNER_LEFT),
            InlineKeyboardButton("‚û°Ô∏è", callback_data=CALLBACK_CORNER_RIGHT),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)



def get_back_mm():
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è     –ù–∞–∑–∞–¥Ô∏è", callback_data=CALLBACK_MM)]]
    return InlineKeyboardMarkup(keyboard)

# Main Menu
def get_main_menu():
    keyboard = [
        [
            InlineKeyboardButton("üï∏  Small HUBs", callback_data=CALLBACK_MM_HUB),
        ],
        [
            InlineKeyboardButton("üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data=CALLBACK_MM_SCHEDULE),
            InlineKeyboardButton("üìã –ó–∞–¥–∞—á–∏", callback_data=CALLBACK_MM_TASKS),
        ],
        [
            InlineKeyboardButton("‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞‚ñ∞", callback_data='null'),
        ],
        [
            InlineKeyboardButton("üéµ  Art.Hub Radio", url='https://t.me/arthub_radio'),
        ],
        [
            InlineKeyboardButton("üíé  Corner", callback_data=CALLBACK_MM_CORNER),
        ],
        [
            InlineKeyboardButton("üõí  Shop", callback_data=CALLBACK_MM_SHOP),
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æÔ∏è", callback_data=CALLBACK_MM_SETTING),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def get_rereg_button():
    keyboard = [
        [
            InlineKeyboardButton("üì≤  –°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data=CALLBACK_RR),
        ],
        [
            InlineKeyboardButton("–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", url="https://t.me/HUBsup"),
        ],
        [
            InlineKeyboardButton("üî• –ù–∞—à —Å–∞–π—Ç! ", url="https://www.thehub.su")
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


def on_start(update: Update, context: CallbackContext):
    message = update.message
    user = mondb.users.find_one({"user_id": message.chat.id})
    logging.info(message.chat.id)

    if not user:
        message.reply_text(
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•–∞–±!  –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É!',
            reply_markup=REPLY_KEYBOARD_MARKUP
        )
    else:
        message.reply_text(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: ",
            reply_markup=get_main_menu()
        )


def get_photo(update: Update, context: CallbackContext):
    user = mondb.users.find_one({"user_id": update.message.chat.id})
    query = update.callback_query
    if user.get('user_photo') is not None:
        if user.get('user_photo') == "need":
            fileID = update.message.photo[-1].file_id
            file_info = tele_Bot.get_file(fileID)
            downloaded_file = tele_Bot.download_file(file_info.file_path)
            with open("user_photos/" + str(user['user_id']) + ".jpg", 'wb') as new_file:
                new_file.write(downloaded_file)

            mondb.users.update_one(
                {'_id': user['_id']},
                {'$set':
                     {'user_photo': "user_photos/" + str(user['user_id']) + ".jpg"}
                })

            context.bot.send_message(
                    chat_id=user['user_id'],
                    text="–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                    reply_markup=ReplyKeyboardRemove(),
            )
            context.bot.send_message(
                chat_id=user['user_id'],
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(),
            )

def handle_text(update: Update, context: CallbackContext):
    message = update.message
    query = update.callback_query
    user = mondb.users.find_one({"user_id": update.effective_message.chat_id})
    text = update.message.text
    if user is None:
        return

    if user.get('user_description') is not None:
        if user.get('user_description') == "need":
            mondb.ValentineEvent_users.update_one(
                {'_id': user['_id']},
                {'$set': {'user_description': text,
                          }
                 })
            context.bot.send_message(
                    chat_id=user['user_id'],
                    text="–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                    reply_markup=ReplyKeyboardRemove(),
            )
            context.bot.send_message(
                chat_id=user['user_id'],
                text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=get_main_menu(),
            )


# IF user message == contact
def on_contact(update: Update, context: CallbackContext):
    message = update.message
    user_phone_number = 0
    user_chat_id = 0
    # IF user get another Contact
    if message.chat_id == int(message.contact['user_id']):
        if message.contact:
            num1 = str(message.contact['phone_number'])
            user_phone_number = 0
            # F*CKING TELEGRAM output various number, IDK
            for i in range(-10, 0):
                user_phone_number += int(num1[i]) * (10 ** ((i + 1) * -1))
            user_chat_id += int(message.contact['user_id'])
            logging.info("User ID: " + str(message.contact['user_id']))
            logging.warning("User Phone: " + str(user_phone_number))
        user = login_user(mondb, user_chat_id, user_phone_number)
        logging.info(user)
        if not user:
            message.reply_text(
                '–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
                reply_markup=ReplyKeyboardRemove()
            )
            message.reply_text(
                '–í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ–±–ª–µ–º—ã: \
                \n1. –ï—Å–ª–∏ –≤ –ê–Ω–∫–µ—Ç–µ –≤—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. \
                \n2. –ï—Å–ª–∏ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∞–Ω–∫–µ—Ç—É –±–æ–ª–µ–µ —á–µ–º 1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\
                \n3. –ï—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –∞–Ω–∫–µ—Ç—É, —Å–∞–º–æ–µ –≤—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø–µ—Ä–µ–π–¥—è –Ω–∞ –Ω–∞—à —Å–∞–π—Ç!',
                reply_markup=get_rereg_button()
            )

        else:
            message.reply_text(
                '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!',
                reply_markup=ReplyKeyboardRemove()
            )
            message.reply_text(
                '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç Altair8 - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å H.U.B. ver 0.1. –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –≤–∞–º –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è!\
                 \n–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:',
                reply_markup=get_main_menu()
            )
    else:
        message.reply_text(
            '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞! –£–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç UserID.',
            reply_markup=ReplyKeyboardRemove()
        )

# User Register
def login_user(mondb, user_id, user_phone_number):
    user = mondb.users.find_one({"user_phone": user_phone_number})
    logging.info("user_phone: " + str(user_phone_number))
    if user != None and user.get('user_id') is None:
        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_id': user_id}}
        )
        return user
    else:
        return None

# Command to edit phone number from DB
def do_changephone(update: Update, context: CallbackContext):
    # IF incorrect command input
    user_new_phone_number = 0
    try:
        # Parcing user input
        old_phone_number = int(update.message.text[13:23])
        user_new_phone_number = int(update.message.text[26:36])
        user_name = update.message.text[37:]
        user = mondb.users.find_one({"user_phone": old_phone_number})
    except:
        user = None
        user_name = ''

    if not user:
        update.message.reply_text(
            '–û—à–∏–±–∫–∞! –£–∫–∞–∑–∞–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!',
        )
    elif user.get('user_id') is None and user.get("user_name") == user_name:
        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'user_phone': user_new_phone_number,
                      'user_id': update.message.chat_id
                      }}
        )
        update.message.reply_text(
            '–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ /start',
        )
    else:
        update.message.reply_text(
            '–û—à–∏–±–∫–∞! –ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö!',
        )

def do_sendmessage(update: Update, context: CallbackContext):
    lead_message = update.message.text
    user = mondb.users.find_one({"user_id": update.message.chat_id})
    user_lead = int(user.get("user_hubs") / 1000000)
    if user_lead == 1:
        update.message.reply_text(
            '–¢–æ–ª—å–∫–æ –õ–∏–¥ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â—É—é –∑–∞–¥–∞—á—É!',
        )
    else:
        # Slot choice
        # TODO inline mode
        if len(lead_message) > 11:
            if lead_message[10] == '0':
                for x in mondb.users.find({"lead": True}):
                    if not (x.get("user_id") is None):
                        if str(x.get("user_hubs"))[0] == lead_message[12]:
                            context.bot.send_message(
                                chat_id=x.get("user_id"),
                                text=lead_message[11:],
                            )
            if lead_message[10] == '1':
                for x in mondb.users.find({"lead": True}):
                    if not (x.get("user_id") is None):
                        context.bot.send_message(
                            chat_id=x.get("user_id"),
                            text=lead_message[11:],
                        )
            if lead_message[10] == '2':
                for x in mondb.users.find():
                    if not (x.get("user_id") is None):
                        if str(x.get("user_hubs"))[user_lead-1] == '1':
                            context.bot.send_message(
                                chat_id=x.get("user_id"),
                                text=lead_message[11:],
                            )
            if lead_message[10] == '3':
                for x in mondb.users.find():
                    if not (x.get("user_id") is None):
                        context.bot.send_message(
                            chat_id=x.get("user_id"),
                            text=lead_message[11:],
                        )
            else:
                update.message.reply_text(
                    '–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∫–ª—é—á –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è!',
                )
        else:
            update.message.reply_text(
                '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!',
            )

# Sticker Time! Dont Touch!
#
# def handle_docs_audio(update: Update, context: CallbackContext):
#     # –ü–æ–ª—É—á–∏–º ID –°—Ç–∏–∫–µ—Ä–∞
#     sticker_id = update.message.sticker.file_id
#     logging.warning(sticker_id)


# Command to event new day to small HUB Schledule
def do_addevent(update: Update, context: CallbackContext):
    text = update.message.text
    user = mondb.users.find_one({"user_id": update.message.chat_id})
    user_lead = int(user.get("user_hubs")/1000000)
    if user_lead == 1:
        update.message.reply_text(
            '–¢–æ–ª—å–∫–æ –õ–∏–¥ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!',
        )
    else:
        # Slot choice
        # TODO Edit this command, automatic slot choice
        if text[10] == '1':
            mondb.allschledule.update_one(
                {'hub_id': user_lead-1},
                {'$set': {'event1': text[12:]}}
            )
        if text[10] == '2':
            mondb.allschledule.update_one(
                {'hub_id': user_lead-1},
                {'$set': {'event2': text[12:]}}
            )
        if text[10] == '3':
            mondb.allschledule.update_one(
                {'hub_id': user_lead-1},
                {'$set': {'event3': text[12:]}}
            )

# Telegram inline menu buttons handler
def keyboard_call_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    # bot.answer_callback_query(query.id, text="–í—Å–ø–ª—ã–≤–∞—à–∫–∞!", show_alert=True)

    if data == CALLBACK_MM:
        query.edit_message_text(
            text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: ",
            reply_markup=get_main_menu()
        )
    elif data == CALLBACK_MM_HUB:
        user = mondb.users.find_one({"user_id": update.effective_message.chat_id})
        query.edit_message_text(
            text="–í—Å–µ –¥–≤–µ—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã! \n–í—Å—è –ø—è—Ç–µ—Ä–∫–∞ –æ—Ç–µ—Ä—ã—Ç—ã—Ö –•–∞–±–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω–∞ –≤–∞–º: ",
            reply_markup=get_hubs(str(user.get("user_hubs")))
        )
    #    # TODO Inline music add
    # elif data == CALLBACK_MM_MUSIC:
    #    chatid = update.effective_message.chat_id
    #    query.edit_message_text(
    #        text="–ú—É–∑—ã–∫–∞ –¥–Ω—è, –¥–ª—è –¥—É—à–∏ –∏ —Ä–∞–±–æ—Ç—ã –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –•–∞–±–∞. –°–µ–≥–æ–¥–Ω—è –≤ —á–µ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∞ –æ—Ç @MON0makh\
    #     \n–ó–∞–∫–∞–∑–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –º–æ–∂–Ω–æ —É @MON0makh üéß",
    #    )
    #    # TODO Local audio need
    #    context.bot.send_sticker(chatid, 'CAACAgEAAxkBAAIDMV92U2Sk4DVLErXtBFPWgQhfmqh1AAJhAAPArAgjT8wG8ZJFRc0bBA')
    #    for i in range(1, 7):
    #        context.bot.send_audio(
    #            chat_id=chatid,
    #            audio='https://raw.githubusercontent.com/POSE1D0N-AP/Altair8tb/master/music%20of%20day/{}.mp3'.format(i),
    #        )
    #    context.bot.send_message(
    #        chat_id=chatid,
    #        text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é",
    #        reply_markup=get_main_menu(),
    #   )

    elif data == CALLBACK_MM_SCHEDULE:
        chatid = update.effective_message.chat_id
        user = mondb.users.find_one({"user_id": chatid})
        # TODO add BIGHUB Schledule

        no_event = 0
        for i in range(1, 7):
            table = mondb.allschledule.find_one({"hub_id": i})
            if table != None:
                text = table.get('hub_name') + ": "
                if table.get('event1') != None:
                    text += "\n" + table.get('event1')
                if table.get('event2') != None:
                    text += "\n" + table.get('event2')
                if table.get('event3') != None:
                    text += "\n" + table.get('event3')

                # IF schedule empty
                if len(text) > 10:
                    context.bot.send_message(
                        chat_id=chatid,
                        text="{}".format(text),
                    )
                else:
                    no_event += 1
        if no_event == 6:
            context.bot.send_message(
                chat_id=chatid,
                text="–õ–∏–±–æ –∑–¥–µ—Å—å —á—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ –ª–∏–±–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.",
            )
    elif data == CALLBACK_MM_CORNER:
        user = mondb.users.find_one({"user_id": update.effective_message.chat_id})
        mondb.users.update_one(
           {'_id': user['_id']},
           {'$set': {'user_photo': "need"}})

        if user.get('user_photo') is not None:
            if user.get('user_photo') != "no" and user.get('user_photo') != "need":
                context.bot.sendPhoto(chat_id=user['partner'],
                                      photo=open(file=user.get('user_photo'), mode='rb'))
        query.edit_message_text(
            text="–í —Ä–∞–∑–¥–µ–ª–µ #CORNER –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö, –≤ –ø–æ–∏—Å–∫–∞—Ö \
                    –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–∏–∫–æ–≤!\
                    \n\n–û–±—â–∞–π—Ç–µ—Å—å –∏ —Ä–∞–∑–∏–≤–∞–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –•–∞–±–æ–º! \
                    \n**–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=get_social_networks()
        )
        query.edit_message_text(
            text="–í —Ä–∞–∑–¥–µ–ª–µ #CORNER –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö, –≤ –ø–æ–∏—Å–∫–∞—Ö \
                            –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–∏–∫–æ–≤!\
                            \n\n–û–±—â–∞–π—Ç–µ—Å—å –∏ —Ä–∞–∑–∏–≤–∞–π—Ç–µ—Å—å –≤–º–µ—Å—Ç–µ —Å –•–∞–±–æ–º! \
                            \n**–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
            reply_markup=get_social_networks()
        )
        tele_Bot.answer_callback_query(query.id, text="–§—É–Ω–∫—Ü–∏—è CORNER –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†", show_alert=True)

    elif data == CALLBACK_CORNER_RIGHT or data == CALLBACK_CORNER_LEFT:
        user = mondb.users.find_one({"user_id": update.effective_message.chat_id})
        corn_users = mondb.users.find({"user_in_corner": True})
        if data == CALLBACK_CORNER_RIGHT:
            user['corner_page'] += 1
            if user.get('corner_page') > len(corn_users):
                user['corner_page'] = 0
        else:
            user['corner_page'] -= 1
            if user.get('corner_page') < 0:
                user['corner_page'] = len(corn_users)

        mondb.users.update_one(
            {'_id': user['_id']},
            {'$set': {'corner_page': user['corner_page']
                      }}
        )
        query.edit_message_text(
            text=corn_users[user['corner_page']],
            reply_markup=get_corner_nav()
        )


    elif data == CALLBACK_MM_SHOP:
        tele_Bot.answer_callback_query(query.id, text="–§—É–Ω–∫—Ü–∏—è SHOP –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†", show_alert=True)

    elif data == CALLBACK_MM_SETTING:
        query.edit_message_text(
            text="–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –•–∞–±\
            \n–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ - @HUBsup\
            \n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, —á—Ç–æ –±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!",
            reply_markup=get_social_networks()
        )
    elif data == CALLBACK_MM_TASKS:
        tele_Bot.answer_callback_query(query.id, text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!", show_alert=True)

    elif data == CALLBACK_RR:
        query.edit_message_text(
            text="–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∞–Ω–∫–µ—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\
            \n–í–≤–µ–¥–∏—Ç–µ /editphone <—Å—Ç–∞—Ä—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞> <–Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞> <–∏–º—è-—Ñ–∞–º–∏–ª–∏—é –∫–∞–∫ –≤ –∞–Ω–∫–µ—Ç–µ>. –ü—Ä–∏–º–µ—Ä:\
            \n/editphone +7XXXXXXXXXX +7YYYYYYYYYY –í–ª–∞–¥–∏–º–∏—Ä –ú–æ–Ω–æ–º–∞—Ö\
            \n–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π! –ù–æ–º–µ—Ä –≤–∞–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ —Å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.\
            \n\n–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É: @HUBsup"
        )


def main():
    updater = Updater(
        token=TG_TOKEN,
        use_context=True,
    )
    logging.info("Altair8 started")
    # Commands handler add, IF you u need add new command use it
    dp = updater.dispatcher
    dp.add_handler(CommandHandler('start', on_start))
    dp.add_handler(CommandHandler('editphone', do_changephone))
    dp.add_handler(CommandHandler('addevent', do_addevent))
    dp.add_handler(CommandHandler('sendtask', do_sendmessage))
    # dp.add_handler(MessageHandler(Filters.sticker, handle_docs_audio))
    dp.add_handler(CallbackQueryHandler(callback=keyboard_call_handler, pass_chat_data=True))
    dp.add_handler(MessageHandler(Filters.contact, on_contact))
    dp.add_handler(MessageHandler(Filters.photo, get_photo))
    dp.add_handler(MessageHandler(Filters.text, handle_text))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()